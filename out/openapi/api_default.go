/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiFooBarGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	becool2 *string
	becool *string
}

// being cool 2
func (r ApiFooBarGetRequest) Becool2(becool2 string) ApiFooBarGetRequest {
	r.becool2 = &becool2
	return r
}

// being cool
func (r ApiFooBarGetRequest) Becool(becool string) ApiFooBarGetRequest {
	r.becool = &becool
	return r
}

func (r ApiFooBarGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.FooBarGetExecute(r)
}

/*
FooBarGet Method for FooBarGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFooBarGetRequest
*/
func (a *DefaultAPIService) FooBarGet(ctx context.Context) ApiFooBarGetRequest {
	return ApiFooBarGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) FooBarGetExecute(r ApiFooBarGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.FooBarGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/foo/bar"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.becool2 == nil {
		return nil, reportError("becool2 is required and must be specified")
	}

	if r.becool != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "becool", r.becool, "")
	} else {
		var defaultValue string = "ASC"
		r.becool = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "becool2", r.becool2, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFooFooGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	becool2 *string
	becool *string
}

// being cool 2
func (r ApiFooFooGetRequest) Becool2(becool2 string) ApiFooFooGetRequest {
	r.becool2 = &becool2
	return r
}

// being cool
func (r ApiFooFooGetRequest) Becool(becool string) ApiFooFooGetRequest {
	r.becool = &becool
	return r
}

func (r ApiFooFooGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.FooFooGetExecute(r)
}

/*
FooFooGet Method for FooFooGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFooFooGetRequest
*/
func (a *DefaultAPIService) FooFooGet(ctx context.Context) ApiFooFooGetRequest {
	return ApiFooFooGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) FooFooGetExecute(r ApiFooFooGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.FooFooGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/foo/foo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.becool2 == nil {
		return nil, reportError("becool2 is required and must be specified")
	}

	if r.becool != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "becool", r.becool, "")
	} else {
		var defaultValue string = "ASC"
		r.becool = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "becool2", r.becool2, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
